// Generated by view binder compiler. Do not edit!
package com.lyapunov.tetris.databinding;

import android.view.LayoutInflater;
import android.view.SurfaceView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.lyapunov.tetris.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMainBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView LevelRealTime;

  @NonNull
  public final TextView Lines;

  @NonNull
  public final TextView Next;

  @NonNull
  public final TextView RealTimeLines;

  @NonNull
  public final TextView Score;

  @NonNull
  public final TextView ScoreRealTime;

  @NonNull
  public final SurfaceView board;

  @NonNull
  public final ImageButton downButton;

  @NonNull
  public final ImageButton leftButton;

  @NonNull
  public final TextView level;

  @NonNull
  public final SurfaceView nextBoard;

  @NonNull
  public final ImageButton rightButton;

  @NonNull
  public final ImageButton rotateButton;

  @NonNull
  public final ImageButton upButton;

  private ActivityMainBinding(@NonNull ConstraintLayout rootView, @NonNull TextView LevelRealTime,
      @NonNull TextView Lines, @NonNull TextView Next, @NonNull TextView RealTimeLines,
      @NonNull TextView Score, @NonNull TextView ScoreRealTime, @NonNull SurfaceView board,
      @NonNull ImageButton downButton, @NonNull ImageButton leftButton, @NonNull TextView level,
      @NonNull SurfaceView nextBoard, @NonNull ImageButton rightButton,
      @NonNull ImageButton rotateButton, @NonNull ImageButton upButton) {
    this.rootView = rootView;
    this.LevelRealTime = LevelRealTime;
    this.Lines = Lines;
    this.Next = Next;
    this.RealTimeLines = RealTimeLines;
    this.Score = Score;
    this.ScoreRealTime = ScoreRealTime;
    this.board = board;
    this.downButton = downButton;
    this.leftButton = leftButton;
    this.level = level;
    this.nextBoard = nextBoard;
    this.rightButton = rightButton;
    this.rotateButton = rotateButton;
    this.upButton = upButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.LevelRealTime;
      TextView LevelRealTime = rootView.findViewById(id);
      if (LevelRealTime == null) {
        break missingId;
      }

      id = R.id.Lines;
      TextView Lines = rootView.findViewById(id);
      if (Lines == null) {
        break missingId;
      }

      id = R.id.Next;
      TextView Next = rootView.findViewById(id);
      if (Next == null) {
        break missingId;
      }

      id = R.id.RealTimeLines;
      TextView RealTimeLines = rootView.findViewById(id);
      if (RealTimeLines == null) {
        break missingId;
      }

      id = R.id.Score;
      TextView Score = rootView.findViewById(id);
      if (Score == null) {
        break missingId;
      }

      id = R.id.ScoreRealTime;
      TextView ScoreRealTime = rootView.findViewById(id);
      if (ScoreRealTime == null) {
        break missingId;
      }

      id = R.id.board;
      SurfaceView board = rootView.findViewById(id);
      if (board == null) {
        break missingId;
      }

      id = R.id.downButton;
      ImageButton downButton = rootView.findViewById(id);
      if (downButton == null) {
        break missingId;
      }

      id = R.id.leftButton;
      ImageButton leftButton = rootView.findViewById(id);
      if (leftButton == null) {
        break missingId;
      }

      id = R.id.level;
      TextView level = rootView.findViewById(id);
      if (level == null) {
        break missingId;
      }

      id = R.id.next_board;
      SurfaceView nextBoard = rootView.findViewById(id);
      if (nextBoard == null) {
        break missingId;
      }

      id = R.id.rightButton;
      ImageButton rightButton = rootView.findViewById(id);
      if (rightButton == null) {
        break missingId;
      }

      id = R.id.rotateButton;
      ImageButton rotateButton = rootView.findViewById(id);
      if (rotateButton == null) {
        break missingId;
      }

      id = R.id.upButton;
      ImageButton upButton = rootView.findViewById(id);
      if (upButton == null) {
        break missingId;
      }

      return new ActivityMainBinding((ConstraintLayout) rootView, LevelRealTime, Lines, Next,
          RealTimeLines, Score, ScoreRealTime, board, downButton, leftButton, level, nextBoard,
          rightButton, rotateButton, upButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
